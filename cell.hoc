//van Kan 1997
//gain: multiplicative operations


load_file("nrngui.hoc")


ndend = 6
size_parameter = 4 //those two may change on initialization loop at proc go()


n_secondary_dends = ndend*size_parameter //

vdark = -43
n_neuron = 2

begintemplate cell
public nclist, soma, dend, secondary_dendrites, neck_secondary_dends, tip_secondary_dends, axon, axonterm, size_parameter, n_secondary_dends

create soma, dend[1], secondary_dendrites[1], neck_secondary_dends[1], tip_secondary_dends[1], axon, axonterm

proc init() {
nclist = new List()
ndend = 6
size_parameter = 25


n_secondary_dends = ndend*size_parameter

  create soma, dend[ndend], secondary_dendrites[n_secondary_dends], neck_secondary_dends[n_secondary_dends], tip_secondary_dends[n_secondary_dends], axon, axonterm

  soma {
    nseg = 11
    diam = 7
    L    = 14
    insert pas
    Ra = 250
    cm = 1
    g_pas = 0.000015
    e_pas = -80

  }

  for i = 0, ndend-1 dend[i] {
    nseg = 9
    diam = 1.3
    L    = 18
    insert pas
    Ra = 250
    cm = 1
    g_pas = 0.000015
    e_pas = -80

  }


 for i = 0, n_secondary_dends-1 secondary_dendrites[i] {
    nseg = 9
    diam = 0.1
    L    = 2
    insert pas
    Ra = 250
    cm = 1
    g_pas = 0.000015
    e_pas = -80

  }


  for i = 0, n_secondary_dends-1 neck_secondary_dends[i] {
    nseg = 3
    diam = 0.06
    L    = 0.2
    insert pas
    Ra = 250
    cm = 1
    g_pas = 0.000015
    e_pas = -80

  }

  for i = 0, n_secondary_dends-1 tip_secondary_dends[i] {
    nseg = 1
    diam = 0.19
    L    = 0.44
    insert pas
    Ra = 250
    cm = 1
    g_pas = 0.00002
    e_pas = -80

  }

  axon {
    nseg = 11
    diam = 1
    L    = 40
    insert pas
    insert hh
    Ra = 250
    cm = 1
    g_pas = 0.000015
    e_pas = -80
  }

  axonterm {
    nseg = 1
    diam = 7
    L    = 7
    insert pas
    Ra = 250
    cm = 1
    g_pas = 0.000015
    e_pas = -80
 }

  // Connect parts together

  for i = 0, ndend-1 {
    connect dend[i] (0), soma(0)

    for j = 0, size_parameter-1 {
      connect secondary_dendrites[j+i*size_parameter] (0), dend[i] (j/size_parameter+0.5/size_parameter)
    }
  }

  for i = 0, n_secondary_dends-1 {
    connect neck_secondary_dends[i] (0), secondary_dendrites[i] (1)
  }

  for i = 0, n_secondary_dends-1 {
    connect tip_secondary_dends[i] (0), neck_secondary_dends[i] (1)
  }

  connect axon (0), soma (1)
  connect axonterm (0), axon (1)
}
endtemplate cell


objectvar neuron_plasticity[n_neuron]

for i = 0, n_neuron-1 {
  neuron_plasticity[i] = new cell()
}
maxsyn = 10
objectvar syn[maxsyn]

syn[0]=GSyn

neuron_plasticity[0].soma neuron_plasticity[1].nclist.append(new NetCon(&v(1), syn[0], -20, 1, 0.5))

objectvar stim_vclamp

neuronplasticity[0].soma stim_vclamp = new VClamp(0.5)
stim_vclamp.dur[0] = 600
stim_vclamp.dur[1] = 300
stim_vclamp.dur[2] = 300
stim_vclamp.amp[0] = -40
stim_vclamp.amp[1] = -40
stim_vclamp.amp[2] = -40


objref recv
objref savdata

proc go() {

  strdef fname
  tstop = 1200
  dt = 0.00625*4

   forall {finitialize(vdark)}     //initialize membrane potential at -43 mV for all cell sections


          for d = 0, 4 {

            recv = new Vector()
            //recv.record(&VClamp[3].i)
            recv.record(&MBCell[0].soma.v(0.5))
            //recv.record(&MBCell[0].tip_secondary_dends[1].v(0.5))
            //recv.record(&MBCell[0].dend.v(0.9375))
            stim_vclamp.amp[1] = -40-d*10
            init()
            run()
            doEvents()
            for e = 0, recv.size()-1 {
              Data[d][e] = recv.x(e)
            }
          }


            savdata = new File()
            sprint(fname,"G_K%d%d%d_%d.dat",a,b,c,w)
            savdata.wopen(fname)

          for e = 3, recv.size()-1 {
              savdata.printf("%g\t",(e-3)*dt)

              for d = 0, 20 {
                savdata.printf("%g\t",Data[d][e])
              }

              savdata.printf("\r")
            }

            savdata.close()
        }
}
access neuron_plasticity[0].soma
//xopen("xxx.ses")
go()
